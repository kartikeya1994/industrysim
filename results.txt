LOW PM
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 30404.385
Took 9.74061393738s
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 30381.83
Took 10.4329841137s


(keras) kartikeya ~/keras/industrysim(>_<) python run.py 
Took 18.1255970001s
Avg obj: 41552.15
Took 19.4127831459s

HIGH PM 70 TTR
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 29435.325
Took 9.94504117966s
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 30156.185
Took 9.7887070179s

HIGH PM 40 TTR
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 27502.065
Took 9.45393896103s
(keras) kartikeya ~/keras/industrysim(>_<) python periodic_maintenance.py 
Avg obj: 27067.59
Took 9.370002985s

600, 2, 0
1800, 2, 1000
5000, 2, 1000
**************************
Costs: 1000 400 200
TTRs: 70 70 15
Policy:
Avg obj: 16746.5
Total high: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Total low: {'FnC1': 4999, 'Lathe': 5000, 'Milling': 0}
Took 128.81813097s
Periodic:
Avg obj: 44151.6666667
Total high: {'FnC1': 1289, 'Lathe': 1457, 'Milling': 1488}
Total low: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Took 10.0257260799s

Comment: Policy schedules all PM low, nothing on milling
**************************
Costs: 1000 1000 200
TTRs: 70 70 15
Policy:
Avg obj: 43502.5
Total high: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Total low: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Took 96.3617470264s
Periodic:
Avg obj: 50771.5833333
Total high: {'FnC1': 1299, 'Lathe': 1438, 'Milling': 1496}
Total low: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Took 9.49222207069s
Comment: Policy is wrong here, should schedule a few PM Highs or all PM lows
***************************
Costs: 100 400 200
TTRs: 700 70 15
Policy:
Avg obj: 27323.375
Total high: {'FnC1': 5000, 'Lathe': 0, 'Milling': 0}
Total low: {'FnC1': 0, 'Lathe': 5000, 'Milling': 5000}
Took 104.15932703s
Periodic: 
Avg obj: 2141357.58333
Total high: {'FnC1': 656, 'Lathe': 1073, 'Milling': 1218}
Total low: {'FnC1': 0, 'Lathe': 0, 'Milling': 0}
Took 13.8033168316s
Comment: 

Why policy schedules a PM job in every epoch: 
- The cost model is not tight. 



50000 iterations

Avg obj: 22495.12
Total high: {'FnC1': 2027, 'Lathe': 1218, 'Milling': 1393}
Total low: {'FnC1': 1781, 'Lathe': 3199, 'Milling': 624}
Took 1840.973001s

Stored weights delay cost testing:
(keras) kartikeya ~/keras/industrysim(>_<) python delay_cost_var.py 
Delay penalty: 0
Avg obj: 22340.0
Total high: {'FnC1': 2024, 'Lathe': 1179, 'Milling': 1436}
Total low: {'FnC1': 1795, 'Lathe': 3239, 'Milling': 658}
Delay: 0.0 0hrs
Delay penalty: 1
Avg obj: 22385.175
Total high: {'FnC1': 1951, 'Lathe': 1224, 'Milling': 1442}
Total low: {'FnC1': 1799, 'Lathe': 3227, 'Milling': 598}
Delay: 157.175 157.175hrs
Delay penalty: 5
Avg obj: 23038.1
Total high: {'FnC1': 1967, 'Lathe': 1212, 'Milling': 1466}
Total low: {'FnC1': 1786, 'Lathe': 3193, 'Milling': 613}
Delay: 741.1 148.22hrs
Delay penalty: 10
Avg obj: 23881.65
Total high: {'FnC1': 2070, 'Lathe': 1231, 'Milling': 1426}
Total low: {'FnC1': 1738, 'Lathe': 3221, 'Milling': 638}
Delay: 1470.65 147.065hrs
Delay penalty: 25
Avg obj: 26544.0
Total high: {'FnC1': 2030, 'Lathe': 1239, 'Milling': 1482}
Total low: {'FnC1': 1730, 'Lathe': 3221, 'Milling': 634}
Delay: 3982.0 159.28hrs
Delay penalty: 50
Avg obj: 28972.25
Total high: {'FnC1': 1948, 'Lathe': 1183, 'Milling': 1424}
Total low: {'FnC1': 1824, 'Lathe': 3261, 'Milling': 649}
Delay: 6783.25 135.665hrs
Delay penalty: 100
Avg obj: 43742.5
Total high: {'FnC1': 1953, 'Lathe': 1253, 'Milling': 1410}
Total low: {'FnC1': 1753, 'Lathe': 3157, 'Milling': 636}
Delay: 21454.5 214.545hrs
Took 48.4577171803s




